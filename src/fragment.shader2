#version 150

in vec3 eye_position;
in vec3 eye_normal;
in vec2 texcoord;

uniform sampler2D tex;

struct light_info {
	vec3  translation;
	vec3  direction;
	vec3  intensity;
	float spot_exponent;
	float spot_cutoff;
	int   type;
};
uniform light_info light[8];
uniform int light_num;

struct material_info {
	vec3 ka;
	vec3 kd;
	vec3 ks;
	float shininess;
};
uniform material_info material;

struct light_color {
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

struct light_color point(int i)
{
	struct light_color light_color;

	vec3 n = normalize(eye_normal);
	vec3 s = normalize(vec3(light[i].translation - eye_position.xyz));
	vec3 v = normalize(-eye_position.xyz);
	vec3 r = reflect(-s, n);

	light_color.ambient = light[i].intensity * material.ka;
	light_color.diffuse = light[i].intensity *
		material.kd * max(dot(s, n), 0.0);
	light_color.specular = light[i].intensity *
		material.ks * pow(max(dot(r, v), 0.0), material.shininess);
	
	return light_color;
}

struct light_color spot(int i)
{
	struct light_color light_color;

	vec3 n = eye_normal;
	vec3 s = normalize(vec3(light[i].translation - eye_position.xyz));
	float angle = acos(dot(-s, light[i].direction));
	float cutoff = radians(clamp(light[i].spot_cutoff, 0.0, 90.0));
	vec3 ambient = light[i].intensity * material.ka;
	if (angle < light[i].spot_cutoff) {
		float spot_factor = pow(dot(-s, light[i].direction),
			light[i].spot_exponent);
		vec3 v = normalize(-eye_position.xyz);
		vec3 h = normalize(v + s);
		light_color.ambient = ambient;
		light_color.diffuse = spot_factor * light[i].intensity *
			material.kd * max(dot(s, n), 0.0);
		light_color.specular = spot_factor * light[i].intensity *
			material.ks * pow(max(dot(h, n), 0.0),
			material.shininess);
	} else {
		light_color.ambient = ambient;
	}

	return light_color;
}

void main()
{
	struct light_color light_color, tmp;
	vec3 intensity = vec3(0.0);
	vec3 ambient_and_diffuse = vec3(0.0);
	vec3 specular = vec3(0.0);

	for (int i = 0; i < light_num; i++) {
		if (light[i].type == 0)
			tmp = point(i);
		else if (light[i].type == 2)
			tmp = spot(i);
		light_color.ambient += tmp.ambient;
		light_color.diffuse += tmp.diffuse;
		light_color.specular += tmp.specular;
	}
	ambient_and_diffuse = light_color.ambient + light_color.diffuse;
	specular = light_color.specular; 

	intensity = light_color.ambient + light_color.diffuse + 
		light_color.specular;

	vec4 tex_color = texture(tex, texcoord);
	gl_FragColor = vec4(ambient_and_diffuse * tex_color.xyz + specular,
		1.0);
}
